/*===========================================================
ES2015以前のjavascriptでは変数の宣言を"var"一つで行っていた
プロジェクトが大きくなると意図しない変数の変更が起こってしま
===========================================================*/
var value = "var変数";
console.log(value);

// var変数は上書き可能
value = "var変数を上書き";
console.log(value);

// var変数は再宣言可能
var value = "var変数を再宣言";
console.log(value);

/*====================================
letでの変数宣言
上書きは可能であるが、再宣言は不可能
=====================================*/
let value2 = "let変数";
console.log(value2);

// letは上書きが可能
value2 = "let変数を上書き";
console.log(value2);

// letは再宣言不可
// let value2 = "let変数を再宣言";

/*==========================================
constでの変数宣言
上書きも再宣言も不可であり、一番厳密な宣言
============================================*/
const value3 = "const変数";
console.log(value3);

//const変数は上書き不可
// value3 = "const変数を上書き";

// const変数は再宣言不可
// const value3 = "const変数を再宣言";

/*======================================================================================
constであっても値の型がオブジェクト型であればプロパティの値の変更や追加、削除などができる
オブジェクト型は基本型(数字、文字列、論理値などの型)以外の値を指す
======================================================================================*/
const value4 = {
  name: "hayato",
  age : 21,
};
console.log(value4);

value4.name = "hayashi";
value4.age = "30";
console.log(value4);

value4.addres = "gifu";
console.log(value4);

/*================================================
配列でもオブジェクトのように変更することができる
================================================*/
const value5 = ['dog', 'cat'];
console.log(value5);

value5.push("monkey");
value5[0] = "bird";
console.log(value5);

/*=========================================
Reactで使用される変数宣言はほとんど"const"
=========================================*/